setwd('./data')
setwd('./data/LIFE_DATA')
library(sas7bdat)
getwd()
setwd('/Users/zhangh24/GoogleDrive/project/Tom/mixture_approach_estimate_population_value/mixture_approach/')
data <- read.sas7bdat('./data/LIFE_DATA/dailycycle.sas7bdat')
data.baseline <- read.sas7bdat('./data/LIFE_DATA/baseline.sas7bdat')
head(data)
data[1:100,]
data[101,200,]
data[101:200,]
data[201:300,]
data[201:300,]
data[301:400,]
table(data$ID)
length(table(data$ID))
n.sub <- length(table(data$ID))
n.sub
table(data$ID)
table(data$ID)[1]
table(data$ID)[1][1]
table(data$ID)[1][2]
table(data$ID)[1][1]
ID <- unique(data$ID)
head(ID)
ID <- sort(ID)
ID
idx <- which(data$ID==ID[1])
data[idx,]
cen <- max(data[idx,]$preg)
cen
n <- max(data[idx,]$method5)
n
?max
n <- max(data[idx,]$method5,na.rm=T)
n
N <- max(data[idx,]$method5,na.rm=T)
for(i in 1:n.sub){
print(i)
idx <- which(data$ID==ID[1])
cen <- max(data[idx,]$preg)
N <- max(data[idx,]$method5,na.rm=T)
}
N
cen <- rep(0,n.sub)
N <- rep(0,n.sub)
cen <- rep(0,n.sub)
N <- rep(0,n.sub)
for(i in 1:n.sub){
print(i)
idx <- which(data$ID==ID[i])
cen[i] <- max(data[idx,]$preg)
N[i] <- max(data[idx,]$method5,na.rm=T)
}
N
cen
cen <- rep(0,n.sub)
N <- rep(0,n.sub)
for(i in 1:n.sub){
print(i)
idx <- which(data$ID==ID[i])
cen[i] <- max(data[idx,]$preg,na.rm=T)
N[i] <- max(data[idx,]$method5,na.rm=T)
}
N
cen
cen
sum(cen)/length(cen)
source("./code/geometric_fun.R")
set.seed(123)
library(boot)
library(ggplot2)
library(ggthemes)
library(dplyr)
Rboot <- 300
M <- 1
K <- n.sub
Rboot <- 300
M <- 1
K <- n.sub
#Nt <- data[data[,2]=='H',1]
#data.uncen <- data.frame(days=Nt)
Nt <- N
cen <- cen
StratEst <- StratEstimateFunction(Nt,c(1:K),cen)
PooledEst <- PooledEstimateFunction(Nt,c(1:K),cen)
NPMLEst <- NPMLEstimateFunction_mean(Nt,c(1:K),cen)
N <- Nt
n <- 100
begin_point1 <- runif(n,0.005,0.2)
begin_point2 <- runif(n,100,300)
begin_point <- cbind(begin_point1,begin_point2)
try_result <- rep(0,n)
for(i in 1:n){
fit <-  optim(par = begin_point[i,],fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.8,10000),method="L-BFGS-B",control=list(fnscale=-1))
try_result[i] <- BetaGeometricLikehood(fit$par)
}
idx <- which.max(try_result)
begin <- begin_point[idx,]
BetaEst <- ParaBetaEstimateFunction(Nt)
bootdata <- data.frame(N=N,cen=cen)
NPMLEst_boot <- rep(0,Rboot)
for(i in 1:Rboot){
print(i)
ind <- sample(c(1:length(Nt)),length(Nt),replace = T)
N <- Nt[ind]
cend <- cen[ind]
NPMLEst_boot[i] <- NPMLEstimateFunction_mean(N,c(1:K),cend)
}
library(devtools)
install_github("andrewhaoyu/PAV")
library(PAV)
NPMLEstimateFunction(N,cen)
library(sas7bdat)
setwd('/users/hzhang1/mixture_approach')
data <- read.sas7bdat('./data/LIFE_DATA/dailycycle.sas7bdat')
data.baseline <- read.sas7bdat('./data/LIFE_DATA/baseline.sas7bdat')
n.sub <- length(table(data$ID))
ID <- unique(data$ID)
ID <- sort(ID)
cen <- rep(0,n.sub)
N <- rep(0,n.sub)
for(i in 1:n.sub){
print(i)
idx <- which(data$ID==ID[i])
cen[i] <- max(data[idx,]$preg,na.rm=T)
N[i] <- max(data[idx,]$method5,na.rm=T)
}
censor.rate <- sum(cen)/length(cen)
NPMLEstimateFunction(N,cen)
cen
NPMLEstimateFunction
rm(NPMLEstimateFunction)
library(PAV)
NPMLEstimateFunction
NPMLEstimateFunction(N,cen)
NPML.estimate <- NPMLEstimateFunction(N,cen)
UU <- NPML.estimate[[1]]
pp <- NPML.estimate[[2]]
plot(UU,pp)
unique(UU)
UU.uni <- unique(UU)
UU.uni <- unique(UU)
pp.uni <- rep(0,length(UU.uni))
for(i in 1:length(UU.uni)){
temp.u <- UU.uni[i]
idx <- which(UU==temp.u)
pp.uni <- sum(UU[temp.u])
}
plot(UU.uni,pp.uni)
UU.uni <- unique(UU)
pp.uni <- rep(0,length(UU.uni))
for(i in 1:length(UU.uni)){
temp.u <- UU.uni[i]
idx <- which(UU==temp.u)
pp.uni[i] <- sum(UU[temp.u])
}
plot(UU.uni,pp.uni)
pp.uni
i
temp.u
idx
UU.uni <- unique(UU)
pp.uni <- rep(0,length(UU.uni))
for(i in 1:length(UU.uni)){
temp.u <- UU.uni[i]
idx <- which(UU==temp.u)
pp.uni[i] <- sum(UU[idx])
}
plot(UU.uni,pp.uni)
pp.uni
UU
pp
sum(pp)
UU.uni <- unique(UU)
pp.uni <- rep(0,length(UU.uni))
for(i in 1:length(UU.uni)){
temp.u <- UU.uni[i]
idx <- which(UU==temp.u)
pp.uni[i] <- sum(pp[idx])
}
plot(UU.uni,pp.uni)
?plot
plot(UU.uni,pp.uni,xlim=c(0,0.5))
plot(UU.uni,pp.uni,xlim=c(0,0.5),y.lim=c(0,0.1))
plot(UU.uni,pp.uni,xlim=c(0,0.5),ylim=c(0,0.1))
plot(UU.uni,pp.uni,xlim=c(0,0.5),ylim=c(0,0.05))
plot(UU.uni,pp.uni,xlim=c(0,0.5),ylim=c(0,0.02))
plot(UU.uni,pp.uni,xlim=c(0,0.5),ylim=c(0,0.01))
a <- rnorm(1000)
p <- ecdf(a)
plot(p)
p
class(p)
attributes(p)
p[1]
UU.cut <- seq(0,1,10000)
pp.cut <- rep(0,length(UU.cut))
for(i in 1:length(UU.cut)){
idx <- which(UU<=UU.cut[i])
pp.cut[i] <- sum(pp[idx])
}
plot(UU.cut,pp.cut,type="l")
head(UU.cut)
length(UU.cut)
?seq
UU.cut <- seq(0,1,0.0001)
pp.cut <- rep(0,length(UU.cut))
for(i in 1:length(UU.cut)){
idx <- which(UU<=UU.cut[i])
pp.cut[i] <- sum(pp[idx])
}
plot(UU.cut,pp.cut,type="l")
plot(UU.cut,pp.cut,type="l",xlab="probability mass estimate for pregnancy probability",
ylab="cumulative probability")
plot(UU.cut,pp.cut,type="l",xlab="probability mass estimate for pregnancy probability",
ylab="cumulative probability",main="cumulative curve of NPML estimate pregnancy probability")
pp
UU
png("./result/cdf_NPML.png")
plot(UU.cut,pp.cut,type="l",xlab="probability mass estimate for pregnancy probability",
ylab="cumulative probability",main="cumulative curve of NPML estimate pregnancy probability")
dev.off()
install_github("andrewhaoyu/PAV")
library(PAV)
png("./result/cdf_NPML.png")
plot(UU.cut,pp.cut,type="l",xlab="probability mass estimate for pregnancy probability",
ylab="cumulative probability",main="cumulative curve of NPML estimate pregnancy probability")
dev.off()
NPML.estimate <- NPMLEstimateFunction(N,cen)
UU <- NPML.estimate[[1]]
pp <- NPML.estimate[[2]]
preg.probability.est <- NPML.estimate[[3]]
preg.probability.est
data <- cbind(N,cen)
colnames(data) <- c("pregnancy cycles","pregnant")
head(data)
head(ID)
idx <- which(data$ID==ID[i])
data <- read.sas7bdat('./data/LIFE_DATA/dailycycle.sas7bdat')
n.sub <- length(table(data$ID))
ID <- unique(data$ID)
ID <- sort(ID)
cen <- rep(0,n.sub)
N <- rep(0,n.sub)
idx <- which(data$ID==ID[i])
cen[i] <- max(data[idx,]$preg,na.rm=T)
N[i] <- max(data[idx,]$method5,na.rm=T)
i <- 1
print(i)
idx <- which(data$ID==ID[i])
cen[i] <- max(data[idx,]$preg,na.rm=T)
N[i] <- max(data[idx,]$method5,na.rm=T)
data[idx,]
head(data)
data.clean <- cbind(ID,N,cen)
ID <- unique(data$ID)
ID <- sort(ID)
cen <- rep(0,n.sub)
N <- rep(0,n.sub)
for(i in 1:n.sub){
print(i)
idx <- which(data$ID==ID[i])
cen[i] <- max(data[idx,]$preg,na.rm=T)
N[i] <- max(data[idx,]$method5,na.rm=T)
}
censor.rate <- sum(cen)/length(cen)
install_github("andrewhaoyu/PAV")
data.clean <- cbind(ID,N,cen)
colnames(data) <- c("ID","pregnancy cycles","pregnant")
colnames(data.clean) <- c("ID","pregnancy cycles","pregnant")
head(data.clean)
data.clean %>% select(cycles==0&pregnant==0)
data.clean %>% filter(cycles==0&pregnant==0)
colnames(data.clean) <- c("ID","pregnancy_cycles","pregnant")
data.clean %>% filter(pregnancy_cycles==0&pregnant==0)
data.clean <- cbind(ID,N,cen)
colnames(data.clean) <- c("ID","pregnancy_cycles","pregnant")
data.clean %>% filter(pregnancy_cycles==0&pregnant==0)
class(data.clean$pregnancy_cycles)
class(data.clean)
data.clean <- data.frame(ID,N,cen)
colnames(data.clean) <- c("ID","pregnancy_cycles","pregnant")
data.clean %>% filter(pregnancy_cycles==0&pregnant==0)
colnames(data.clean) <- c("ID","men_cycles","pregnant")
data.clean %>% filter(men_cycles==0&pregnant==0)
library(sas7bdat)
setwd('/users/hzhang1/mixture_approach')
data <- read.sas7bdat('./data/LIFE_DATA/dailycycle.sas7bdat')
data.baseline <- read.sas7bdat('./data/LIFE_DATA/baseline.sas7bdat')
n.sub <- length(table(data$ID))
ID <- unique(data$ID)
ID <- sort(ID)
cen <- rep(0,n.sub)
N <- rep(0,n.sub)
for(i in 1:n.sub){
print(i)
idx <- which(data$ID==ID[i])
cen[i] <- max(data[idx,]$preg,na.rm=T)
N[i] <- max(data[idx,]$method5,na.rm=T)
}
table(cen,N)
head(data)
idx <- which(N==0,cen==1)
head(idx)
install_github("andrewhaoyu/PAV")
library(devtools)
library(devtools)
install_github("andrewhaoyu/PAV")
library(PAV)
cen
obs <- rep(0,n.sub)
N <- rep(0,n.sub)
for(i in 1:n.sub){
print(i)
idx <- which(data$ID==ID[i])
obs[i] <- max(data[idx,]$preg,na.rm=T)
N[i] <- max(data[idx,]$method5,na.rm=T)
}
table(N,obs)
table(obs,N)
idx <- which(obs==1&N==0)
idx
idx <- which(data$ID==23)
data[idx,]
table(N,obs)
table(obs,N)
idx <- which(obs==0&N==0)
idx
id <- which(data$ID==1)
data[id,]
id <- which(N==0&obs==1)
id
id <- which(data$ID==36)
data[id,]
