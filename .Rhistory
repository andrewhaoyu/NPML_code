#theme_Publication()
labs(x="Time to Heal(days)", y="# of patients") +
#scale_x_continuous(breaks=seq(0,1000, by=50)) +
#scale_y_continuous(labels=comma)+
geom_hline(yintercept=0, size=0.4, color="black")
dev.off()
png("./result/men_cyc_dis.png",width = 8,height = 6,units = "in",res = 600)
ggplot(data.clean, aes(men_cycles)) +
geom_histogram( fill="#c0392b", alpha=0.75) +
fte_theme() +
#theme_Publication()
labs(x="Time to Heal(days)", y="# of patients") +
#scale_x_continuous(breaks=seq(0,1000, by=50)) +
#scale_y_continuous(labels=comma)+
geom_hline(yintercept=0, size=0.4, color="black")
dev.off()
png("./result/cdf_NPML.png",width = 8,height = 6,units = "in",res = 600)
plot(UU.cut,pp.cut,type="l",xlab="probability mass estimate for pregnancy probability",
ylab="cumulative probability",main="cumulative curve of NPML estimate pregnancy probability")
dev.off()
NPML.estimate
StratEst <- StratEstimateFunction(Nt,cen)
library(PAV)
install_github("andrewhaoyu/PAV")
library(PAV)
StratEst <- StratEstimateFunction(Nt,cen)
Nt <- N
StratEst <- StratEstimateFunction(Nt,cen)
PooledEst <- PooledEstimateFunction(Nt,,cen)
PooledEst <- PooledEstimateFunction(Nt,cen)
NPMLEst <- NPMLEstimateFunction(N,cen)
StartEst
StratEst
NPMLEst
StratEst
PooledEst
N <- Nt
n <- 100
begin_point1 <- runif(n,0.005,0.2)
begin_point2 <- runif(n,100,300)
begin_point <- cbind(begin_point1,begin_point2)
try_result <- rep(0,n)
for(i in 1:n){
fit <-  optim(par = begin_point[i,],fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.8,10000),method="L-BFGS-B",control=list(fnscale=-1))
try_result[i] <- BetaGeometricLikehood(fit$par)
}
idx <- which.max(try_result)
begin <- begin_point[idx,]
install_github("andrewhaoyu/PAV")
library(PAV)
n <- 100
begin_point1 <- runif(n,0.005,0.2)
begin_point2 <- runif(n,100,300)
begin_point <- cbind(begin_point1,begin_point2)
try_result <- rep(0,n)
for(i in 1:n){
fit <-  optim(par = begin_point[i,],fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.8,10000),method="L-BFGS-B",control=list(fnscale=-1))
try_result[i] <- BetaGeometricLikehood(fit$par)
}
idx <- which.max(try_result)
begin <- begin_point[idx,]
M <- 1
M <- 1
n <- 100
begin_point1 <- runif(n,0.005,0.2)
begin_point2 <- runif(n,100,300)
begin_point <- cbind(begin_point1,begin_point2)
try_result <- rep(0,n)
for(i in 1:n){
fit <-  optim(par = begin_point[i,],fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.8,10000),method="L-BFGS-B",control=list(fnscale=-1))
try_result[i] <- BetaGeometricLikehood(fit$par)
}
idx <- which.max(try_result)
begin <- begin_point[idx,]
BetaEst <- ParaBetaEstimateFunction(Nt)
install_github("andrewhaoyu/PAV")
library(PAV)
n <- 100
begin_point1 <- runif(n,0.005,0.2)
begin_point2 <- runif(n,100,300)
begin_point <- cbind(begin_point1,begin_point2)
try_result <- rep(0,n)
for(i in 1:n){
fit <-  optim(par = begin_point[i,],fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.8,10000),method="L-BFGS-B",control=list(fnscale=-1))
try_result[i] <- BetaGeometricLikehood(fit$par)
}
idx <- which.max(try_result)
begin <- begin_point[idx,]
BetaEst <- ParaBetaEstimateFunction(Nt)
BetaEst
n <- 1000
begin_point1 <- runif(n,0.005,0.5)
begin_point2 <- runif(n,1,300)
begin_point <- cbind(begin_point1,begin_point2)
try_result <- rep(0,n)
for(i in 1:n){
fit <-  optim(par = begin_point[i,],fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.8,10000),method="L-BFGS-B",control=list(fnscale=-1))
try_result[i] <- BetaGeometricLikehood(fit$par)
}
try_result
idx <- which.max(try_result)
idx
begin_point[idx]
begin_point2[idx]
begin <- begin_point[idx,]
BetaEst <- ParaBetaEstimateFunction(Nt)
BetaEst
n <- 2000
begin_point1 <- runif(n,0.005,1)
begin_point2 <- runif(n,1,500)
begin_point <- cbind(begin_point1,begin_point2)
try_result <- rep(0,n)
for(i in 1:n){
fit <-  optim(par = begin_point[i,],fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.8,10000),method="L-BFGS-B",control=list(fnscale=-1))
try_result[i] <- BetaGeometricLikehood(fit$par)
}
idx <- which.max(try_result)
begin <- begin_point[idx,]
idx
begin_point[idx]
try_result[idx]
BetaEst <- ParaBetaEstimateFunction(Nt)
BetaEst
n <- 2000
begin_point1 <- runif(n,0.005,0.9)
begin_point2 <- runif(n,1,500)
begin_point <- cbind(begin_point1,begin_point2)
try_result <- rep(0,n)
for(i in 1:n){
fit <-  optim(par = begin_point[i,],fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.9,10000),method="L-BFGS-B",control=list(fnscale=-1))
try_result[i] <- BetaGeometricLikehood(fit$par)
}
idx <- which.max(try_result)
begin <- begin_point[idx,]
fit <-  optim(par = begin,fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.9995,10000),method="L-BFGS-B",control=list(fnscale=-1))
BetaEst <- fit$par[1]
like <- BetaGeometricLikehood(fit$par)
BetaEst
like
n <- 2000
begin_point1 <- runif(n,0.005,0.9)
begin_point2 <- runif(n,1,500)
begin_point <- cbind(begin_point1,begin_point2)
try_result <- rep(0,n)
for(i in 1:n){
fit <-  optim(par = begin_point[i,],fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.9,10000),method="L-BFGS-B",control=list(fnscale=-1))
try_result[i] <- BetaGeometricLikehood(fit$par)
}
idx <- which.max(try_result)
begin <- begin_point[idx,]
fit <-  optim(par = begin,fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.9995,10000),method="L-BFGS-B",control=list(fnscale=-1))
BetaEst <- fit$par[1]
like <- BetaGeometricLikehood(fit$par)
like
BetaEst
n <- 2000
begin_point1 <- runif(n,0.005,0.9)
begin_point2 <- runif(n,1,500)
begin_point <- cbind(begin_point1,begin_point2)
try_result <- rep(0,n)
for(i in 1:n){
fit <-  optim(par = begin_point[i,],fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.9,10000),method="L-BFGS-B",control=list(fnscale=-1))
try_result[i] <- BetaGeometricLikehood(fit$par)
}
idx <- which.max(try_result)
begin <- begin_point[idx,]
fit <-  optim(par = begin,fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.9995,10000),method="L-BFGS-B",control=list(fnscale=-1))
BetaEst <- fit$par[1]
like <- BetaGeometricLikehood(fit$par)
BetaEst
like
n <- 3000
begin_point1 <- runif(n,0.005,0.9)
begin_point2 <- runif(n,1,500)
begin_point <- cbind(begin_point1,begin_point2)
try_result <- rep(0,n)
for(i in 1:n){
fit <-  optim(par = begin_point[i,],fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.9,10000),method="L-BFGS-B",control=list(fnscale=-1))
try_result[i] <- BetaGeometricLikehood(fit$par)
}
idx <- which.max(try_result)
begin <- begin_point[idx,]
fit <-  optim(par = begin,fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.9995,10000),method="L-BFGS-B",control=list(fnscale=-1))
BetaEst <- fit$par[1]
like <- BetaGeometricLikehood(fit$par)
BetaEst
like
n <- 3000
begin_point1 <- runif(n,0.005,0.9)
begin_point2 <- runif(n,1,500)
begin_point <- cbind(begin_point1,begin_point2)
try_result <- rep(0,n)
for(i in 1:n){
fit <-  optim(par = begin_point[i,],fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.9,10000),method="L-BFGS-B",control=list(fnscale=-1))
try_result[i] <- BetaGeometricLikehood(fit$par)
}
idx <- which.max(try_result)
begin <- begin_point[idx,]
fit <-  optim(par = begin,fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.9995,10000),method="L-BFGS-B",control=list(fnscale=-1))
BetaEst <- fit$par[1]
like <- BetaGeometricLikehood(fit$par)
BetaEst
like
n <- 4000
begin_point1 <- runif(n,0.005,0.9)
begin_point2 <- runif(n,1,500)
begin_point <- cbind(begin_point1,begin_point2)
try_result <- rep(0,n)
for(i in 1:n){
fit <-  optim(par = begin_point[i,],fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.9,10000),method="L-BFGS-B",control=list(fnscale=-1))
try_result[i] <- BetaGeometricLikehood(fit$par)
}
idx <- which.max(try_result)
begin <- begin_point[idx,]
fit <-  optim(par = begin,fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.9995,10000),method="L-BFGS-B",control=list(fnscale=-1))
BetaEst <- fit$par[1]
like <- BetaGeometricLikehood(fit$par)
BetaEst
like
n <- 5000
begin_point1 <- runif(n,0.005,0.9)
begin_point2 <- runif(n,1,500)
begin_point <- cbind(begin_point1,begin_point2)
try_result <- rep(0,n)
for(i in 1:n){
fit <-  optim(par = begin_point[i,],fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.9,10000),method="L-BFGS-B",control=list(fnscale=-1))
try_result[i] <- BetaGeometricLikehood(fit$par)
}
idx <- which.max(try_result)
begin <- begin_point[idx,]
fit <-  optim(par = begin,fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.9995,10000),method="L-BFGS-B",control=list(fnscale=-1))
BetaEst <- fit$par[1]
like <- BetaGeometricLikehood(fit$par)
BetaEst
like
n <- 5000
begin_point1 <- runif(n,0.005,0.9)
begin_point2 <- runif(n,1,500)
begin_point <- cbind(begin_point1,begin_point2)
try_result <- rep(0,n)
for(i in 1:n){
fit <-  optim(par = begin_point[i,],fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.9,10000),method="L-BFGS-B",control=list(fnscale=-1))
try_result[i] <- BetaGeometricLikehood(fit$par)
}
idx <- which.max(try_result)
begin <- begin_point[idx,]
fit <-  optim(par = begin,fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.9995,10000),method="L-BFGS-B",control=list(fnscale=-1))
BetaEst <- fit$par[1]
like <- BetaGeometricLikehood(fit$par)
?seq
BetaEst
like
begin
begin <- c(0.3804882,20.0296849)
fit <-  optim(par = begin,fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.9995,10000),method="L-BFGS-B",control=list(fnscale=-1))
fit
begin <- c(0.178,20.0296849)
fit <-  optim(par = begin,fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.9995,10000),method="L-BFGS-B",control=list(fnscale=-1))
BetaEst <- fit$par[1]
like <- BetaGeometricLikehood(fit$par)
BetaEst
like
begin <- c(0.3804882,20.0296849)
fit <-  optim(par = begin,fn=BetaGeometricLikehood,gr=LogL.Derivatives,lower=c(0.0005,0.05),upper=c(0.9995,10000),method="L-BFGS-B",control=list(fnscale=-1))
BetaEst <- fit$par[1]
like <- BetaGeometricLikehood(fit$par)
BetaEst
fit$par
# NPMLEst_boot <- boot(data.frame(N=N,cen=cen),NPMLEstimateFunction_mean,Rboot)
# PooledEst_boot <- boot(N,PooledEstimateFunction,Rboot)
# StratEst_boot <- boot(N,StratEstimateFunction,Rboot)
Rboot <- 10000
NPMLEst_boot <- rep(0,Rboot)
# NPMLEst_boot <- boot(data.frame(N=N,cen=cen),NPMLEstimateFunction_mean,Rboot)
# PooledEst_boot <- boot(N,PooledEstimateFunction,Rboot)
# StratEst_boot <- boot(N,StratEstimateFunction,Rboot)
set.seed(123)
Rboot <- 10000
NPMLEst_boot <- rep(0,Rboot)
PooledEst_boot <- rep(0,Rboot)
PooledEst_boot <- rep(0,Rboot)
for(i in 1:Rboot){
print(i)
ind <- sample(c(1:length(Nt)),length(Nt),replace = T)
N <- Nt[ind]
cend <- cen[ind]
PooledEst_boot[i] <- PooledEstimateFunction(N,c(1:K),cend)
}
PooledEst_boot <- rep(0,Rboot)
for(i in 1:Rboot){
print(i)
ind <- sample(c(1:length(Nt)),length(Nt),replace = T)
N <- Nt[ind]
cend <- cen[ind]
PooledEst_boot[i] <- PooledEstimateFunction(N,cend)
}
StratEst_boot <- rep(0,Rboot)
StratEst_boot <- rep(0,Rboot)
for(i in 1:Rboot){
print(i)
ind <- sample(c(1:length(Nt)),length(Nt),replace = T)
N <- Nt[ind]
cend <- cen[ind]
StratEst_boot[i] <- StratEstimateFunction(N,cend)
}
all.equal(Nt,N)
cen_original <- cen
for(i in 1:Rboot){
print(i)
ind <- sample(c(1:length(Nt)),length(Nt),replace = T)
N <- Nt[ind]
cen <- cen_original[ind]
BetaEst_boot[i] <- ParaBetaEstimateFunction(N)
}
cen <- cen_original
BetaEst_boot <- rep(0,Rboot)
cen_original <- cen
for(i in 1:Rboot){
print(i)
ind <- sample(c(1:length(Nt)),length(Nt),replace = T)
N <- Nt[ind]
cen <- cen_original[ind]
BetaEst_boot[i] <- ParaBetaEstimateFunction(N)
}
cen <- cen_original
NPMLEst
NPMLEst <- NPMLEst[[3]]
NPMLEst
places <- 3
StratEstRound <- round(StratEst,places)
PooledEstRound <- round(PooledEst,places)
BetaEstRound <- round(BetaEst,places)
StratEstLow <- round(quantile(StratEst_boot,0.025),places)
StratEstHigh <- round(quantile(StratEst_boot,0.975),places)
PooledEstLow <- round(quantile(PooledEst_boot,0.025),places)
PooledEstHigh <- round(quantile(PooledEst_boot,0.975),places)
BetaEstLow <- round(quantile(BetaEst_boot,0.025),places)
BetaEstHigh <- round(quantile(BetaEst_boot,0.975),places)
Pooledresult <- paste0(PooledEstRound,"(",PooledEstLow,"-",PooledEstHigh,")")
Stratresult <-  paste0(StratEstRound,"(",StratEstLow,"-",StratEstHigh,")")
Betaresult <- paste0(BetaEstRound,"(",BetaEstLow,"-",BetaEstHigh,")")
Pooledresult
StratEst
Stratresult
Betaresult
Nt <- N
Rboot <- 2
NPMLEst_boot <- rep(0,Rboot)
for(i in 1:Rboot){
print(i)
ind <- sample(c(1:length(Nt)),length(Nt),replace = T)
N <- Nt[ind]
cend <- cen[ind]
NPMLEst_boot[i] <- NPMLEstimateFunction(N,cend)[[3]]
}
NPMLEst_boot
501-15-37
448-12-76
360-7-65
288-7-65
216-18-34
164-22-14
128-7-21
100-21-7
71-10-11
50-6-4
72-10-11
51-7-9
25-11-4
library(sas7bdat)
setwd('/users/hzhang1/mixture_approach')
data <- read.sas7bdat('./data/LIFE_DATA/dailycycle.sas7bdat')
data.baseline <- read.sas7bdat('./data/LIFE_DATA/baseline.sas7bdat')
n.sub <- length(table(data$ID))
ID <- unique(data$ID)
ID <- sort(ID)
obs <- rep(0,n.sub)
N <- rep(0,n.sub)
for(i in 1:n.sub){
print(i)
idx <- which(data$ID==ID[i])
obs[i] <- max(data[idx,]$preg,na.rm=T)
N[i] <- max(data[idx,]$method5,na.rm=T)
}
table(obs,N)
idx.new <- which(N!=0)
obs.new <- obs[idx.new]
N.new <- N[idx.new]
N <- N.new
cen <- obs.new
censor.rate <- sum(cen)/length(cen)
N
cen
length(N)
length(cen)
table(N,cen)
rwoSums(table(N,cen))
table(N,cen)
as.data.farme(table(N,cen))
as.data.frame(table(N,cen))
as.data.frame(table(N,cen))
new.data <- as.data.frame(table(N,cen))
new.data
risk <- rep(0,17)
max(n)
max(N)
length(N)
head(new.data)
risk <- rep(0,max(N))
for(i in 1:max(N)){
if(i==1){
idx <- which(new.data[,1]==i)
remove <- sum(new.data[idx,3])
risk[i] <- length(N)-remove
}else{
idx <- which(new.data[,1]==i)
remove <- sum(new.data[idx,3])
risk[i] <- risk[i-1]-remove
}
}
censor.rate <- sum(cen)/length(cen)
risk
risk
max(n)
max(N)
length(N)
for(i in 1:max(N)){
if(i==1){
idx <- which(new.data[,1]==i)
remove <- sum(new.data[idx,3])
risk[i] <- length(N)
}else{
idx <- which(new.data[,1]==i)
remove <- sum(new.data[idx,3])
risk[i] <- risk[i-1]-remove
}
}
risk
N
head(new.data)
new.data
76/449
table(N,cen)
table(N,cen)[,2]
table(N,cen)[,1]
sur.data <- cbind(table(N,cen),risk)
sur.data
K.estimate <- sur.data[,2]/risk
K.estiamte
K.estimate
K.estimate
plot(K.estimate)
round(K.estimate)
round(K.estimate,2)
library(sas7bdat)
setwd('/users/hzhang1/mixture_approach')
data <- read.sas7bdat('./data/LIFE_DATA/dailycycle.sas7bdat')
data.baseline <- read.sas7bdat('./data/LIFE_DATA/baseline.sas7bdat')
n.sub <- length(table(data$ID))
ID <- unique(data$ID)
ID <- sort(ID)
obs <- rep(0,n.sub)
N <- rep(0,n.sub)
for(i in 1:n.sub){
print(i)
idx <- which(data$ID==ID[i])
obs[i] <- max(data[idx,]$preg,na.rm=T)
N[i] <- max(data[idx,]$method5,na.rm=T)
}
table(obs,N)
idx.new <- which(N!=0)
obs.new <- obs[idx.new]
N.new <- N[idx.new]
N <- N.new
cen <- obs.new
censor.rate <- sum(cen)/length(cen)
library(devtools)
library(PAV)
NPML.estimate <- NPMLEstimateFunction(N,cen)
UU <- NPML.estimate[[1]]
pp <- NPML.estimate[[2]]
UU
preg.probability.est <- NPML.estimate[[3]]
preg.probability.est
mean.estimate <- UU%*%pp
mean.estimate
Var.estimate <- (UU-mean.estimate)^2%*%pp
Var.estimate
UU-mean.estimate
mean.estimate <- sum(UU%*%pp)
mean.estimate
ar.estimate <- sum((UU-mean.estimate)^2%*%pp)
var.estimate <- sum((UU-mean.estimate)^2%*%pp)
var.estiamte
var.estimate
mean.estimate
var.estimate
M <- mean.estimate*(1-mean.estimate)/var.estimate-1
M
var.estimate
x <- seq(0,1,0.0001)
head(x)
y <- dbeta(x,alpha,beta)
alpha <- mean.estimate*M
beta <- (1-mean.estimate)*M
x <- seq(0,1,0.0001)
y <- dbeta(x,alpha,beta)
head(y)
plot(x,y,type='l')
plot(x,y,type='l',main="beta distribution density estimate")
head(data)
head(data.baseline)
